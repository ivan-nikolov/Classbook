@page "/years/archive"
@using Classbook.App.Models.SchoolYears
@inject Classbook.Services.Data.ISchoolYearService yearsService
@inject IToastService toastService
@inject NavigationManager navManager

@if (this.years == null)
{
    <p>Зареждам...</p>
}
else if (this.years.Count == 0)
{
    <h4>Няма учебни години в архива.</h4>
}
else
{
    <ul class="list-group">
        @foreach (var year in this.years)
        {
            <li class="list-group-item">
                <div class="d-flex justify-content-between">
                    <h4>@year.Year</h4>
                    <div>
                        <button class="btn btn-outline-info" @onclick="@((e) => this.OnRestore(year.Id))">Възстанови</button>
                        <button class="btn btn-outline-danger" @onclick="@((e) => this.OnDelete(year.Id, year.Year))">Изтрий</button>
                    </div>
                </div>
            </li>
        }
    </ul>
}

@code {
    private List<SchoolYearViewModel> years;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private ClaimsPrincipal user;

    protected override async Task OnInitializedAsync()
    {
        this.user = (await this.authenticationStateTask).User;

        years = (await this.yearsService.AllByUserIdAsync<SchoolYearViewModel>(user.GetId(), true))
            .ToList();

        await base.OnInitializedAsync();
    }

    private async Task OnDelete(int id, string year)
    {
        await this.yearsService.DeleteAsync(id);
        this.RemoveYear(id);
        this.StateHasChanged();
        this.toastService.ShowSuccess($"Учебна година {year} е изтрита успешно");
    }

    private async Task OnRestore(int id)
    {
        await this.yearsService.RestoreAsync(id);
        this.RemoveYear(id);
        this.StateHasChanged();
        this.toastService.ShowInfo("Учебната година е възстановена.");
    }

    private void RemoveYear(int id)
    {
        var year = this.years.FirstOrDefault(y => y.Id == id);
        this.years.Remove(year);
    }
}
