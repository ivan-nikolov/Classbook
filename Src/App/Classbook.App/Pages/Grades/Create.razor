@page "/grades/create"
@page "/grades/create/{YearId:int}"
@using Classbook.Services.Models;
@using Classbook.App.Models.Grades;
@using Classbook.App.Components.Utitlity;
@using static Classbook.Common.ValidationsMessages.GradeMessages;
@using static Classbook.Common.Messages.GradeMessages;
@inject Classbook.Services.Data.ISchoolYearService yearsService;
@inject Classbook.Services.Data.IGradeService gradeService;
@inject NavigationManager navManager;
@inject IToastService ToastService;
@implements IDisposable

@if (this.years == null)
{
    <p>Зареждам...</p>
}
else if (this.years.Count == 0)
{
    <h4>Няма регистирарани учебни години.</h4>
    <NavLink class="btn btn-outline-info" href="/years/create">Създай учебна година</NavLink>
}
else
{
    <EditForm EditContext="this.editContext" OnSubmit="this.HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group row">
            <label for="SchoolYearId" class="col-sm-2 col-form-label">
                Година:
            </label>
            <div class="col-sm-10">
                <CustomInputSelect class="form-control" @bind-Value="this.input.SchoolYearId">
                    <option value="" disabled>Изберете година...</option>
                    @foreach (var year in this.years)
                        {
                        <option value="@year.Id">@year.Name</option>
                        }
                </CustomInputSelect>
            </div>
        </div>
        @if (this.isYearSelected)
        {
            <div class="form-group row">
                <label for="SchoolYearId" class="col-sm-2 col-form-label">
                    Клас:
                </label>
                <div class="col-sm-10">
                    <InputNumber class="form-control" min="1" max="13" step="1" @bind-Value="this.input.GradeNumber"></InputNumber>
                </div>
            </div>
        }
        <button type="submit" class="btn btn-outline-info" disabled="@(!this.isValidInput)">Създай</button>
    </EditForm>
}

@code {
    private bool isYearSelected = false;
    private bool isValidInput;
    private EditContext editContext;
    private GradeInputModel input;

    [Parameter]
    public int YearId { get; set; }

    private List<SchoolYearSelectModel> years;

    private string test = string.Empty;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private ClaimsPrincipal user;

    protected override async Task OnInitializedAsync()
    {
        this.input = new GradeInputModel()
        {
            SchoolYearId = this.YearId,
        };

        this.isYearSelected = this.YearId != 0;
        this.editContext = new EditContext(input);
        this.isValidInput = this.editContext.Validate();
        this.user = (await this.authenticationStateTask).User;
        this.years = (await this.yearsService.AllByUserIdAsync<SchoolYearSelectModel>(user.GetId()))
        .ToList();

        this.editContext.OnValidationStateChanged += this.OnValidationStateChanged;
        this.editContext.OnFieldChanged += this.OnFieldChange;
        await base.OnInitializedAsync();
    }

    private void OnValidationStateChanged(object sender, ValidationStateChangedEventArgs e)
    {
        var messages = this.editContext.GetValidationMessages(this.editContext.Field(nameof(this.input.SchoolYearId)));

        this.isYearSelected = messages.Count() == 0;
        this.StateHasChanged();
    }

    private void OnFieldChange(object sender, FieldChangedEventArgs e)
    {
        this.isValidInput = this.editContext.Validate();
        Console.WriteLine(e.FieldIdentifier.FieldName);

        this.StateHasChanged();
    }

    private async Task HandleSubmit()
    {
        var errorList = await this.ServerValidate();

        var isValid = this.editContext.Validate() && !errorList.Any();

        if (isValid)
        {
            var dto = new GradeDto()
            {
                GradeNuber = this.input.GradeNumber,
                SchoolYearId = this.input.SchoolYearId,
            };

            await this.gradeService.CreateAsync(dto);
            this.ToastService.ShowSuccess(CreatedSuccessfuly);

            this.navManager.NavigateTo($"/years/details/{this.input.SchoolYearId}", false);
        }
        else
        {
            foreach (var error in errorList)
            {
                this.ToastService.ShowError(error);
            }
        }
    }

    private async Task<List<string>> ServerValidate()
    {
        var errorList = new List<string>();

        if (!await this.yearsService.CheckIfExistsAsync(this.input.SchoolYearId))
        {
            errorList.Add(SchoolYearDoesNotExistsErrorMessage);
        }
        else if (await this.gradeService.GradeExistsForSchoolYearAsync(this.input.SchoolYearId, this.input.GradeNumber))
        {
            errorList.Add(GradeExistsErrorMessage);
        }

        return errorList;
    }

    public void Dispose()
    {
        this.editContext.OnValidationStateChanged -= this.OnValidationStateChanged;
        this.editContext.OnFieldChanged -= this.OnFieldChange;
    }
}
