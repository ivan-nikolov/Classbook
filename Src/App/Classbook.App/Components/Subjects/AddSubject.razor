@inject Classbook.Services.Data.ISubjectService subjectService;
@inject IModalService modalService;
@inject IToastService toastService;
@using Classbook.App.Models.Subjects;

<TabControl>
    <TabPage ButtonText="Избери съществуващ">
        <AddExistingSubjectForm GradeId="this.gradeId" OnSubjectSelect="this.SelectSubject">

        </AddExistingSubjectForm>
    </TabPage>
    <TabPage ButtonText="Създай нов">
        <Classbook.App.Pages.Subjects.Create OnSubjectCreated="this.SelectCreatedSubject">

        </Classbook.App.Pages.Subjects.Create>
    </TabPage>
</TabControl>

@code {

    private SubjectIdInputModel subjectId;
    private int gradeId;

    private List<AddSubjectToGradeViewModel> subjects;

    [CascadingParameter]
    public ModalParameters Parameters { get; set; }

    [CascadingParameter]
    public BlazoredModal BlazoredModal { get; set; }

    bool ShowForm { get; set; } = true;
    int FormId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.gradeId = this.Parameters.TryGet<int>("gradeId");

        Func<AddSubjectToGradeViewModel, bool> expression = x => !x.Grades.Any(g => g.GradeId == this.gradeId);

        this.subjects = this.subjectService.GetAll<AddSubjectToGradeViewModel>(expression).ToList();
        this.subjectId = new SubjectIdInputModel()
        {
            Id = subjects.FirstOrDefault()?.Id ?? default
        };


        this.FormId = this.Parameters.Get<int>("FormId");
        this.BlazoredModal.SetTitle("Добавяне на предмет");
        await base.OnInitializedAsync();
    }

    private void Done()
    {
        this.modalService.Close(ModalResult.Ok("Form submitted"));
    }

    private void Cancel()
    {
        this.modalService.Cancel();
    }

    private async Task SelectSubject(int subjectId)
    {
        if (!await this.SelectSubjectServiveValidate(subjectId))
        {
            await this.subjectService.AddGradeAsync(this.subjectId.Id, this.gradeId);
            this.Done();
        }
        else
        {
            this.toastService.ShowError(ValidationsMessages.SubjectMessages.SubjectExistsForGrade);
        }
    }

    private async Task SelectCreatedSubject(int subjectId)
    {
        await this.subjectService.AddGradeAsync(subjectId, this.gradeId);
        this.Done();
    }

    private async Task<bool> SelectSubjectServiveValidate(int subjectId)
        => await this.subjectService.CheckIfSubjectExistsForGrade(subjectId, this.gradeId);
}
