@inject Classbook.Services.Data.ISubjectService subjectService;
@inject IModalService modalService;
@inject IToastService toastService;
@using Classbook.App.Models.Subjects;
@using Classbook.App.Components.Utitlity;

<ul class="nav nav-tabs">
    <li class="nav-item">
        <a class="nav-link @this.FirstTabActive" @onclick="@this.ToggleForms">@SelectSubjectBtnText</a>
    </li>
    <li class="nav-item">
        <a class="nav-link @this.SecondTabActive" @onclick="this.ToggleForms">@NewSubjectBtnText</a>
    </li>
</ul>

@if (this.showDropdown)
{
    <div class="form-container">
        <div class="small-form-container">
            <EditForm class="d-flex flex-column" Model="this.subjectId" OnValidSubmit="@(() => this.SelectSubject())">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group row">
                    <label for="SchoolYearId" class="col-sm-2 col-form-label">
                        Предмет:
                    </label>
                    <div class="col-sm-12">
                        <CustomInputSelect class="form-control" @bind-Value="this.subjectId.Id">
                            @foreach (var subject in this.subjects)
                                {
                                <option value="@subject.Id">@subject.Name</option>
                                }
                        </CustomInputSelect>
                    </div>
                </div>

                <button class="btn btn-outline-primary" type="submit">Добави</button>
            </EditForm>
        </div>
    </div>
}
else
{
    <Classbook.App.Pages.Subjects.Create OnSubjectCreated="this.SelectCreatedSubject">

    </Classbook.App.Pages.Subjects.Create>
}

@code {
    private bool showDropdown = true;
    private string FirstTabActive = "active";
    private string SecondTabActive = "";
    private const string NewSubjectBtnText = "Създай нов";
    private const string SelectSubjectBtnText = "Издери съществуващ";

    private SubjectIdInputModel subjectId;
    private int gradeId;

    private List<AddSubjectToGradeViewModel> subjects;

    [CascadingParameter]
    public ModalParameters Parameters { get; set; }

    [CascadingParameter]
    public BlazoredModal BlazoredModal { get; set; }

    bool ShowForm { get; set; } = true;
    int FormId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.gradeId = this.Parameters.TryGet<int>("gradeId");

        Func<AddSubjectToGradeViewModel, bool> expression = x => !x.Grades.Any(g => g.GradeId == this.gradeId);

        this.subjects = this.subjectService.GetAll<AddSubjectToGradeViewModel>(expression).ToList();
        this.subjectId = new SubjectIdInputModel()
        {
            Id = subjects.FirstOrDefault()?.Id ?? default
        };

        if (this.subjects.Count == 0)
        {
            this.ToggleForms();
        }

        this.FormId = this.Parameters.Get<int>("FormId");
        this.BlazoredModal.SetTitle("Добавяне на предмет");
        await base.OnInitializedAsync();
    }

    private void Done()
    {
        this.modalService.Close(ModalResult.Ok("Form submitted"));
    }

    private void Cancel()
    {
        this.modalService.Cancel();
    }

    private async Task SelectSubject()
    {
        if (!await this.SelectSubjectServiveValidate())
        {
            await this.subjectService.AddGradeAsync(this.subjectId.Id, this.gradeId);
            this.Done();
        }
        else
        {
            this.toastService.ShowError(ValidationsMessages.SubjectMessages.SubjectExistsForGrade);
        }
    }

    private async Task SelectCreatedSubject(int subjectId)
    {
        await this.subjectService.AddGradeAsync(subjectId, this.gradeId);
        this.Done();
    }

    private void ToggleForms()
    {
        this.showDropdown = !this.showDropdown;
        if (this.showDropdown)
        {
            this.FirstTabActive = "active";
            this.SecondTabActive = "";
        }
        else
        {
            this.FirstTabActive = "";
            this.SecondTabActive = "active";
        }
    }

    private async Task<bool> SelectSubjectServiveValidate()
        => await this.subjectService.CheckIfSubjectExistsForGrade(this.subjectId.Id, this.gradeId);
}
